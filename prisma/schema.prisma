// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique
  password String

  UserWorkSpaces     UserWorkSpaces[]
  UserPages          UserPages[]
  UserWorkSpaceBlock UserWorkSpaceBlock[]
  UserWorkSpaceTasks UserWorkSpaceTasks[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("users")
}

model UserWorkSpaces {
  id          String   @id @default(uuid())
  user_id     String
  members_id  String[]
  workpace_id String

  User               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserPages          UserPages[]
  UserWorkSpaceBlock UserWorkSpaceBlock[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("user_workspaces")
}

model UserPages {
  id           String @id @default(uuid())
  title        String
  user_id      String
  page_id      String
  workspace_id String

  User               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Workspace          UserWorkSpaces       @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Tasks              UserWorkSpaceTasks[]
  UserWorkSpaceBlock UserWorkSpaceBlock[]
  UserTable          UserTable[]

  @@map("user_pages")
}

model UserWorkSpaceBlock {
  id           String        @id @default(uuid())
  content      String
  user_id      String
  workspace_id String
  block_id     String
  page_id      String
  type         UserBlockType

  User      User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Workspace UserWorkSpaces @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Page      UserPages      @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("user_workspace_blocks")
}

enum UserBlockType {
  TEXT
  TITLE
  LIST
}

model UserWorkSpaceTasks {
  id          String         @id @default(uuid())
  description String
  task_id     String
  page_id     String
  status      UserTaskStatus @default(TODO)
  expires_at  DateTime
  updated_at  DateTime       @updatedAt
  created_at  DateTime       @default(now())

  Page UserPages @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User User      @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_workspace_tasks")
}

enum UserTaskStatus {
  TODO
  PROGRESS
  COMPLETED
  HOLD
}

model UserTable {
  id      String @id @default(uuid())
  name    String
  page_id String

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  Page            UserPages         @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserTableColumn UserTableColumn[]

  @@map("user_tables")
}

model UserTableColumn {
  id       String @id @default(uuid())
  name     String
  table_id String

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  Table         UserTable       @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserTableCell UserTableCell[]

  @@map("user_table_columns")
}

model UserTableCell {
  id        String @id @default(uuid())
  content   String
  column_id String

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  Column UserTableColumn @relation(fields: [column_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_table_cells")
}
